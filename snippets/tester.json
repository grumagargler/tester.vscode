{
	"Connect": {
		"prefix": "Tester.Connect",
		"body": [
			"Connect(${1})"
		],
		"description": "Производит подключение Тестера к тестируемому приложению. Настройки подключения указываются в справочнике Приложения."
	},
	"Подключить": {
		"prefix": "Тестер.Подключить",
		"body": [
			"Подключить(${1})"
		],
		"description": "Производит подключение Тестера к тестируемому приложению. Настройки подключения указываются в справочнике Приложения."
	},
	"Disconnect": {
		"prefix": "Tester.Disconnect",
		"body": [
			"Disconnect(${1})"
		],
		"description": "Производит отключение от тестируемого приложения."
	},
	"Отключить": {
		"prefix": "Тестер.Отключить",
		"body": [
			"Отключить(${1})"
		],
		"description": "Производит отключение от тестируемого приложения."
	},
	"CloseAll": {
		"prefix": "Tester.CloseAll",
		"body": [
			"CloseAll(${1})"
		],
		"description": "Закрывает все окна в тестируемом приложении. Если есть окна с несохраненными данными, Тестер будет пытаться ответить Нет на возникающие вопросы системы."
	},
	"ЗакрытьВсе": {
		"prefix": "Тестер.ЗакрытьВсе",
		"body": [
			"ЗакрытьВсе(${1})"
		],
		"description": "Закрывает все окна в тестируемом приложении. Если есть окна с несохраненными данными, Тестер будет пытаться ответить Нет на возникающие вопросы системы."
	},
	"Call": {
		"prefix": "Tester.Call",
		"body": [
			"Call(${1})"
		],
		"description": "Выполняет запуск сценария по переданным пути и параметрам."
	},
	"Вызвать": {
		"prefix": "Тестер.Вызвать",
		"body": [
			"Вызвать(${1})"
		],
		"description": "Выполняет запуск сценария по переданным пути и параметрам."
	},
	"CallServer": {
		"prefix": "Tester.CallServer",
		"body": [
			"CallServer(${1})"
		],
		"description": ""
	},
	"ВызватьСервер": {
		"prefix": "Тестер.ВызватьСервер",
		"body": [
			"ВызватьСервер(${1})"
		],
		"description": ""
	},
	"Run": {
		"prefix": "Tester.Run",
		"body": [
			"Run(${1})"
		],
		"description": "Выполняет запуск сценария в текущей папке сценариев. Метод аналогичен методу Вызвать, с той разницей, что поиск сценария будет производиться начиная с папки, где находится вызывающий сценарий. Таким образом, метод Позвать является краткой записью метода Вызвать."
	},
	"Позвать": {
		"prefix": "Тестер.Позвать",
		"body": [
			"Позвать(${1})"
		],
		"description": "Выполняет запуск сценария в текущей папке сценариев. Метод аналогичен методу Вызвать, с той разницей, что поиск сценария будет производиться начиная с папки, где находится вызывающий сценарий. Таким образом, метод Позвать является краткой записью метода Вызвать."
	},
	"RunServer": {
		"prefix": "Tester.RunServer",
		"body": [
			"RunServer(${1})"
		],
		"description": ""
	},
	"ЗапуститьСервер": {
		"prefix": "Тестер.ЗапуститьСервер",
		"body": [
			"ЗапуститьСервер(${1})"
		],
		"description": ""
	},
	"OpenMenu": {
		"prefix": "Tester.OpenMenu",
		"body": [
			"OpenMenu(${1})"
		],
		"description": "Открывает ссылку на объект в глобальном командном интерфейсе."
	},
	"Меню": {
		"prefix": "Тестер.Меню",
		"body": [
			"Меню(${1})"
		],
		"description": "Открывает ссылку на объект в глобальном командном интерфейсе."
	},
	"Commando": {
		"prefix": "Tester.Commando",
		"body": [
			"Commando(${1})"
		],
		"description": "Выполняет навигационную команду системы по переданному строковому параметру."
	},
	"Коммандос": {
		"prefix": "Тестер.Коммандос",
		"body": [
			"Коммандос(${1})"
		],
		"description": "Выполняет навигационную команду системы по переданному строковому параметру."
	},
	"With": {
		"prefix": "Tester.With",
		"body": [
			"With(${1})"
		],
		"description": "Определяет значение глобальной переменной ТекущийОбъект согласно найденного визуального объекта."
	},
	"Здесь": {
		"prefix": "Тестер.Здесь",
		"body": [
			"Здесь(${1})"
		],
		"description": "Определяет значение глобальной переменной ТекущийОбъект согласно найденного визуального объекта."
	},
	"Get": {
		"prefix": "Tester.Get",
		"body": [
			"Get(${1})"
		],
		"description": "Возвращает тестируемый объект."
	},
	"Получить": {
		"prefix": "Тестер.Получить",
		"body": [
			"Получить(${1})"
		],
		"description": "Возвращает тестируемый объект."
	},
	"Clear": {
		"prefix": "Tester.Clear",
		"body": [
			"Clear(${1})"
		],
		"description": "Очищает поле."
	},
	"Очистить": {
		"prefix": "Тестер.Очистить",
		"body": [
			"Очистить(${1})"
		],
		"description": "Очищает поле."
	},
	"Fetch": {
		"prefix": "Tester.Fetch",
		"body": [
			"Fetch(${1})"
		],
		"description": "Возвращает строковое представление значения объекта."
	},
	"Взять": {
		"prefix": "Тестер.Взять",
		"body": [
			"Взять(${1})"
		],
		"description": "Возвращает строковое представление значения объекта."
	},
	"Set": {
		"prefix": "Tester.Set",
		"body": [
			"Set(${1})"
		],
		"description": "Активирует и устанавливает значение в поле. Если тип поля Переключатель тогда метод ВыбратьВариант будет использован. В остальных случаях ВвестиТекст (речь идет о методах платформы 1С по работе с тестовым приложением)."
	},
	"Установить": {
		"prefix": "Тестер.Установить",
		"body": [
			"Установить(${1})"
		],
		"description": "Активирует и устанавливает значение в поле. Если тип поля Переключатель тогда метод ВыбратьВариант будет использован. В остальных случаях ВвестиТекст (речь идет о методах платформы 1С по работе с тестовым приложением)."
	},
	"Put": {
		"prefix": "Tester.Put",
		"body": [
			"Put(${1})"
		],
		"description": "Метод работает аналогично методу Установить (см. выше) с той разницей, что для ссылочных значений, этот метод будет ждать выпадающего списка предлагаемых платформой значений и выбирать первое значение из этого списка."
	},
	"Ввести": {
		"prefix": "Тестер.Ввести",
		"body": [
			"Ввести(${1})"
		],
		"description": "Метод работает аналогично методу Установить (см. выше) с той разницей, что для ссылочных значений, этот метод будет ждать выпадающего списка предлагаемых платформой значений и выбирать первое значение из этого списка."
	},
	"Pick": {
		"prefix": "Tester.Pick",
		"body": [
			"Pick(${1})"
		],
		"description": "Производит выбор значения из списка выбора."
	},
	"Подобрать": {
		"prefix": "Тестер.Подобрать",
		"body": [
			"Подобрать(${1})"
		],
		"description": "Производит выбор значения из списка выбора."
	},
	"Activate": {
		"prefix": "Tester.Activate",
		"body": [
			"Activate(${1})"
		],
		"description": "Активирует поле."
	},
	"Фокус": {
		"prefix": "Тестер.Фокус",
		"body": [
			"Фокус(${1})"
		],
		"description": "Активирует поле."
	},
	"Click": {
		"prefix": "Tester.Click",
		"body": [
			"Click(${1})"
		],
		"description": "Активирует и нажимает на поле."
	},
	"Нажать": {
		"prefix": "Тестер.Нажать",
		"body": [
			"Нажать(${1})"
		],
		"description": "Активирует и нажимает на поле."
	},
	"Choose": {
		"prefix": "Tester.Choose",
		"body": [
			"Choose(${1})"
		],
		"description": "Начинает процесс выбора значения в поле ввода."
	},
	"Выбрать": {
		"prefix": "Тестер.Выбрать",
		"body": [
			"Выбрать(${1})"
		],
		"description": "Начинает процесс выбора значения в поле ввода."
	},
	"Check": {
		"prefix": "Tester.Check",
		"body": [
			"Check(${1})"
		],
		"description": "Сравнивает значение поля с переданным значением. Если значения не совпадают, будет вызвано исключение."
	},
	"Проверить": {
		"prefix": "Тестер.Проверить",
		"body": [
			"Проверить(${1})"
		],
		"description": "Сравнивает значение поля с переданным значением. Если значения не совпадают, будет вызвано исключение."
	},
	"CheckState": {
		"prefix": "Tester.CheckState",
		"body": [
			"CheckState(${1})"
		],
		"description": "Проверяет оформление поля. Если оформление не совпадает с ожидаемым, будет вызвано исключение."
	},
	"ПроверитьСтатус": {
		"prefix": "Тестер.ПроверитьСтатус",
		"body": [
			"ПроверитьСтатус(${1})"
		],
		"description": "Проверяет оформление поля. Если оформление не совпадает с ожидаемым, будет вызвано исключение."
	},
	"CheckTemplate": {
		"prefix": "Tester.CheckTemplate",
		"body": [
			"CheckTemplate(${1})"
		],
		"description": "Проверяет табличный документ. Исходный табличный документ, с которым будет проводиться сверка, должен быть заранее сохранен в форме самого сценария, на вкладке Шаблон."
	},
	"ПроверитьШаблон": {
		"prefix": "Тестер.ПроверитьШаблон",
		"body": [
			"ПроверитьШаблон(${1})"
		],
		"description": "Проверяет табличный документ. Исходный табличный документ, с которым будет проводиться сверка, должен быть заранее сохранен в форме самого сценария, на вкладке Шаблон."
	},
	"CheckErrors": {
		"prefix": "Tester.CheckErrors",
		"body": [
			"CheckErrors(${1})"
		],
		"description": "Проверяет наличие сообщений. Если сообщения есть, Тестер выкинет исключение."
	},
	"ПроверитьОшибки": {
		"prefix": "Тестер.ПроверитьОшибки",
		"body": [
			"ПроверитьОшибки(${1})"
		],
		"description": "Проверяет наличие сообщений. Если сообщения есть, Тестер выкинет исключение."
	},
	"GetMessages": {
		"prefix": "Tester.GetMessages",
		"body": [
			"GetMessages(${1})"
		],
		"description": "Возвращает фиксированный массив сообщений активного окна."
	},
	"ПолучитьСообщения": {
		"prefix": "Тестер.ПолучитьСообщения",
		"body": [
			"ПолучитьСообщения(${1})"
		],
		"description": "Возвращает фиксированный массив сообщений активного окна."
	},
	"FindMessages": {
		"prefix": "Tester.FindMessages",
		"body": [
			"FindMessages(${1})"
		],
		"description": "Возвращает массив найденных сообщений."
	},
	"НайтиСообщения": {
		"prefix": "Тестер.НайтиСообщения",
		"body": [
			"НайтиСообщения(${1})"
		],
		"description": "Возвращает массив найденных сообщений."
	},
	"Stop": {
		"prefix": "Tester.Stop",
		"body": [
			"Stop(${1})"
		],
		"description": "Завершает выполнение сценария."
	},
	"Стоп": {
		"prefix": "Тестер.Стоп",
		"body": [
			"Стоп(${1})"
		],
		"description": "Завершает выполнение сценария."
	},
	"Waiting": {
		"prefix": "Tester.Waiting",
		"body": [
			"Waiting(${1})"
		],
		"description": "Приостанавливает выполнение сценария до появления запрошенного объекта, например - окна."
	},
	"Дождаться": {
		"prefix": "Тестер.Дождаться",
		"body": [
			"Дождаться(${1})"
		],
		"description": "Приостанавливает выполнение сценария до появления запрошенного объекта, например - окна."
	},
	"Pause": {
		"prefix": "Tester.Pause",
		"body": [
			"Pause(${1})"
		],
		"description": "Останавливает процесс выполнения сценария на заданное число секунд."
	},
	"Пауза": {
		"prefix": "Тестер.Пауза",
		"body": [
			"Пауза(${1})"
		],
		"description": "Останавливает процесс выполнения сценария на заданное число секунд."
	},
	"Next": {
		"prefix": "Tester.Next",
		"body": [
			"Next(${1})"
		],
		"description": "Выполняет переход к следующему, согласно расположения элементов, полю."
	},
	"Далее": {
		"prefix": "Тестер.Далее",
		"body": [
			"Далее(${1})"
		],
		"description": "Выполняет переход к следующему, согласно расположения элементов, полю."
	},
	"Close": {
		"prefix": "Tester.Close",
		"body": [
			"Close(${1})"
		],
		"description": "Закрывает форму."
	},
	"Закрыть": {
		"prefix": "Тестер.Закрыть",
		"body": [
			"Закрыть(${1})"
		],
		"description": "Закрывает форму."
	},
	"GetWindow": {
		"prefix": "Tester.GetWindow",
		"body": [
			"GetWindow(${1})"
		],
		"description": "Возвращает объект типа ТестируемоеОкноКлиентскогоПриложения (TestedClientApplicationWindow) для переданной формы или текущий формы."
	},
	"ПолучитьОкно": {
		"prefix": "Тестер.ПолучитьОкно",
		"body": [
			"ПолучитьОкно(${1})"
		],
		"description": "Возвращает объект типа ТестируемоеОкноКлиентскогоПриложения (TestedClientApplicationWindow) для переданной формы или текущий формы."
	},
	"FindForm": {
		"prefix": "Tester.FindForm",
		"body": [
			"FindForm(${1})"
		],
		"description": "Находит и возвращает форму по переданному заголовку."
	},
	"НайтиФорму": {
		"prefix": "Тестер.НайтиФорму",
		"body": [
			"НайтиФорму(${1})"
		],
		"description": "Находит и возвращает форму по переданному заголовку."
	},
	"GetLinks": {
		"prefix": "Tester.GetLinks",
		"body": [
			"GetLinks(${1})"
		],
		"description": "Возвращает командный интерфейс формы."
	},
	"ПолучитьСсылки": {
		"prefix": "Тестер.ПолучитьСсылки",
		"body": [
			"ПолучитьСсылки(${1})"
		],
		"description": "Возвращает командный интерфейс формы."
	},
	"CurrentTab": {
		"prefix": "Tester.CurrentTab",
		"body": [
			"CurrentTab(${1})"
		],
		"description": "Возвращает текущую вкладку панели с вкладками."
	},
	"ТекущаяВкладка": {
		"prefix": "Тестер.ТекущаяВкладка",
		"body": [
			"ТекущаяВкладка(${1})"
		],
		"description": "Возвращает текущую вкладку панели с вкладками."
	},
	"GotoRow": {
		"prefix": "Tester.GotoRow",
		"body": [
			"GotoRow(${1})"
		],
		"description": "Производит переход к строке таблицы. Метод не предназначен для поиска строк, метод предназначен для навигации к нужной строке."
	},
	"КСтроке": {
		"prefix": "Тестер.КСтроке",
		"body": [
			"КСтроке(${1})"
		],
		"description": "Производит переход к строке таблицы. Метод не предназначен для поиска строк, метод предназначен для навигации к нужной строке."
	},
	"LogError": {
		"prefix": "Tester.LogError",
		"body": [
			"LogError(${1})"
		],
		"description": "Выполняет добавление сообщения в журнал ошибок из кода сценария без остановки выполнения сценария."
	},
	"ЗаписатьОшибку": {
		"prefix": "Тестер.ЗаписатьОшибку",
		"body": [
			"ЗаписатьОшибку(${1})"
		],
		"description": "Выполняет добавление сообщения в журнал ошибок из кода сценария без остановки выполнения сценария."
	},
	"MyVersion": {
		"prefix": "Tester.MyVersion",
		"body": [
			"MyVersion(${1})"
		],
		"description": "Определяет текущую версию приложения, сравнивает с переданной в выражении и возвращает результат сравнения."
	},
	"МояВерсия": {
		"prefix": "Тестер.МояВерсия",
		"body": [
			"МояВерсия(${1})"
		],
		"description": "Определяет текущую версию приложения, сравнивает с переданной в выражении и возвращает результат сравнения."
	},
	"DebugStart": {
		"prefix": "Tester.DebugStart",
		"body": [
			"DebugStart(${1})"
		],
		"description": "После выполнения данного метода, Тестер начнет пошаговое выполнение кода сценария. Фактически, данный метод является условным включением режима отладки сценария."
	},
	"ОтладкаСтарт": {
		"prefix": "Тестер.ОтладкаСтарт",
		"body": [
			"ОтладкаСтарт(${1})"
		],
		"description": "После выполнения данного метода, Тестер начнет пошаговое выполнение кода сценария. Фактически, данный метод является условным включением режима отладки сценария."
	},
	"EnvironmentExists": {
		"prefix": "Tester.EnvironmentExists",
		"body": [
			"EnvironmentExists(${1})"
		],
		"description": "Проверяет наличие ранее созданного тестового окружения по переданному идентификатору."
	},
	"СозданоОкружение": {
		"prefix": "Тестер.СозданоОкружение",
		"body": [
			"СозданоОкружение(${1})"
		],
		"description": "Проверяет наличие ранее созданного тестового окружения по переданному идентификатору."
	},
	"RegisterEnvironment": {
		"prefix": "Tester.RegisterEnvironment",
		"body": [
			"RegisterEnvironment(${1})"
		],
		"description": "Сохраняет идентификатор тестового окружения во внутренней базе Тестера."
	},
	"СохранитьОкружение": {
		"prefix": "Тестер.СохранитьОкружение",
		"body": [
			"СохранитьОкружение(${1})"
		],
		"description": "Сохраняет идентификатор тестового окружения во внутренней базе Тестера."
	},
	"VStudio": {
		"prefix": "Tester.VStudio",
		"body": [
			"VStudio(${1})"
		],
		"description": "Выводит сообщение в список сообщений Тестера, а также в панель Output текстового редактора Visual Studio Code."
	},
	"ВСтудию": {
		"prefix": "Тестер.ВСтудию",
		"body": [
			"ВСтудию(${1})"
		],
		"description": "Выводит сообщение в список сообщений Тестера, а также в панель Output текстового редактора Visual Studio Code."
	},
	"Screenshot": {
		"prefix": "Tester.Screenshot",
		"body": [
			"Screenshot(${1})"
		],
		"description": "Возвращает скриншот тестируемого приложения."
	},
	"Снимок": {
		"prefix": "Тестер.Снимок",
		"body": [
			"Снимок(${1})"
		],
		"description": "Возвращает скриншот тестируемого приложения."
	}
}